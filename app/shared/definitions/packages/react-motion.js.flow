import type { Element as ReactElement } from 'react';

declare module 'react-motion' {
  // === basic reused types ===
  // type of the second parameter of `spring(val, config)` all fields are optional
  declare type SpringHelperConfig = {
    stiffness?: number,
    damping?: number,
    precision?: number,
  };
  // the object returned by `spring(value, yourConfig)`. For internal usage only!
  declare type OpaqueConfig = {
    val: number,
    stiffness: number,
    damping: number,
    precision: number,
  };
  // your typical style object given in props. Maps to a number or a spring config
  declare type Style = {[key: string]: number | OpaqueConfig};
  // the interpolating style object, with the same keys as the above Style object,
  // with the values mapped to numbers, naturally
  declare type PlainStyle = {[key: string]: number};
  // internal velocity object. Similar to PlainStyle, but whose numbers represent
  // speed. Might be exposed one day.
  declare type Velocity = {[key: string]: number};

  // === Motion ===
  declare type MotionProps = {
    defaultStyle?: PlainStyle,
    style: Style,
    children: (interpolatedStyle: PlainStyle) => ReactElement,
    onRest?: () => void,
  };

  // === StaggeredMotion ===
  declare type StaggeredProps = {
    defaultStyles?: Array<PlainStyle>,
    styles: (previousInterpolatedStyles: ?Array<PlainStyle>) => Array<Style>,
    children: (interpolatedStyles: Array<PlainStyle>) => ReactElement,
  };

  // === TransitionMotion ===
  declare type TransitionStyle = {
    key: string, // unique ID to identify component across render animations
    data?: any, // optional data you want to carry along the style, e.g. itemText
    style: Style, // actual style you're passing
  };
  declare type TransitionPlainStyle = {
    key: string,
    data?: any,
    // same as TransitionStyle, passed as argument to style/children function
    style: PlainStyle,
  };
  declare type WillEnter = (styleThatEntered: TransitionStyle) => PlainStyle;
  declare type WillLeave = (styleThatLeft: TransitionStyle) => ?Style;

  declare type TransitionProps = {
    defaultStyles?: Array<TransitionPlainStyle>,
    styles: Array<TransitionStyle> | (previousInterpolatedStyles: ?Array<TransitionPlainStyle>) => Array<TransitionStyle>,
    children: (interpolatedStyles: Array<TransitionPlainStyle>) => ReactElement,
    willEnter?: WillEnter,
    willLeave?: WillLeave,
  };

  declare var Motion: ReactElement;
  declare var StaggeredMotion: ReactElement;
  declare var TransitionMotion: ReactElement;

  declare function spring(val: number, config?: SpringHelperConfig): OpaqueConfig;
}

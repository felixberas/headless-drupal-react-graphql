// @flow

import React from 'react';
import ReactDOM from 'react-dom';
import configureApolloClient from 'state/configureApolloClient';
import configureClientStore from 'state/configureClientStore';
import { apiVersion, queryMap } from 'api';
import introspectionData from 'introspection.json';
import Root from './root';

/* eslint-disable no-underscore-dangle,no-undef */
const apiUri = global.__API__;

// Configure the apollo client with persisted queries.
const apolloClient = configureApolloClient(
  apiUri,
  apiVersion,
  queryMap,
  introspectionData,
);

const reduxStore: AmazeeStore<any, any> = configureClientStore(apolloClient);

// Find the DOM node generated by the server.
const mountNode = global.document.getElementById('app');

// Encapsulate rendering for hot-reloading.
const render: Function = (Component): void => {
  ReactDOM.render(
    <Component store={reduxStore} client={apolloClient} />,
    mountNode,
  );
};

if (
  module.hot &&
  module.hot.accept &&
  typeof module.hot.accept === 'function'
) {
  module.hot.accept('./root', (): void => {
    // eslint-disable-next-line global-require
    render(require('./root').default);
  });
}

// Do the initial rendering.
render(Root);
